{"version":3,"sources":["context/utils.js","context/handlers.js","context/index.js","components/SudokuSquare/index.js","components/SudokuSquare/utils.js","components/SudokuBoard/utils.js","components/SudokuBoard/SudokuBoardRow.js","components/SudokuBoard/index.js","components/SudokuFooter/FooterButton.js","components/SudokuFooter/FinishModal.js","components/NewGameModal/ModalButton.js","components/NewGameModal/index.js","components/SudokuFooter/index.js","components/SudokuKey/SudokuKeyItem.js","components/SudokuKey/index.js","theme.js","App.js","index.js"],"names":["initializeBoard","setBoard","setRenderBoard","originalBoard","newBoard","forEach","row","rowIndex","newRow","square","columnIndex","sudokuSquare","col","error","fixed","number","push","removeOneCopy","value","array","includes","counter","resArray","i","length","checkValueForCompletion","sudokuRowStore","sudokuColumnStore","sudokuBoxStore","some","num","box","removeOneCopyFromStore","activeValue","activeRow","activeCol","activeBox","sudokuKey","setSudokuKey","updatedRow","updatedCol","updatedBox","resetBoardState","setActiveRow","setActiveCol","setActiveBox","setActiveValue","initializeSudokuStore","setSudokuRowStore","setSudokuColumnStore","setSudokuBoxStore","boxIndex","calculateBox","handleSquareSelection","board","newCol","handleBoardReset","handleNewBoard","setOriginalBoard","difficulty","require","SudokuGenerator","generate","getSheet","handleSudokuKeyDown","newKey","Number","currentKey","test","isKeyStrokeValid","newSquare","Object","assign","filter","item","addOneCopyToStore","generatedBoard","emptyBoard","SudokuContext","createContext","SudokuProvider","children","useState","renderBoard","useEffect","context","onNewBoard","onBoardReset","onSquareSelection","onSudokuKeyDown","Provider","SudokuSquare","border","useContext","active","setActive","fontWeight","squareStyle","setSquareStyle","resObj","fontSize","background","color","getSquareStyle","Box","fill","justify","align","focusIndicator","style","onClick","hoverIndicator","side","type","onKeyDown","ev","key","onChange","outline","boxSizing","caretColor","cursor","fontFamily","width","height","textAlign","calculateStarting","boxRow","SudokuBox","boxCol","startingRow","SudokuRow","startingCol","direction","SudokuBoardRow","size","SudokuBoard","FooterButton","label","pad","vertical","horizontal","elevation","FinishModal","setFinishModal","setNewGameModal","Layer","gap","Text","weight","Button","primary","ModalButton","currentDifficulty","setDifficulty","NewGameModal","alignSelf","round","map","index","top","borderRadius","SudokuFooter","message","finishModal","newGameModal","SudokuKeyItem","showNumber","setShowNumber","SudokuKey","bottom","sudokuTheme","deepMerge","grommet","global","colors","myColor","font","family","button","small","radius","App","Grommet","full","theme","Heading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.341adbfd.chunk.js","sourcesContent":["export const initializeBoard = (setBoard, setRenderBoard, originalBoard) => {\n  const newBoard = [];\n  originalBoard.forEach((row, rowIndex) => {\n    const newRow = [];\n    row.forEach((square, columnIndex) => {\n      const sudokuSquare = {\n        row: rowIndex,\n        col: columnIndex,\n        error: false,\n        fixed: false,\n        number: '',\n      };\n      if (typeof square === 'number') {\n        sudokuSquare.fixed = true;\n        sudokuSquare.number = square;\n      }\n      newRow.push(sudokuSquare);\n    });\n    newBoard.push(newRow);\n  });\n  setBoard(newBoard);\n  setRenderBoard(true);\n};\n\nconst removeOneCopy = (value, array) => {\n  if (array.includes(value)) {\n    let counter = 0;\n    const resArray = [];\n    for(let i = 0; i < array.length; i = i + 1) {\n      array[i] === value ? counter++ : resArray.push(array[i]);\n    }\n    while (counter > 1) {\n      resArray.push(value);\n      counter--;\n    }\n    return resArray;\n  } else {\n    return array;\n  }\n};\n\nexport const addOneCopyToStore = (\n  activeValue,\n  activeRow,\n  activeCol,\n  activeBox,\n  sudokuRowStore,\n  sudokuColumnStore,\n  sudokuBoxStore,\n  sudokuKey,\n  setSudokuKey,\n) => {\n  sudokuRowStore[activeRow].push(activeValue);\n  sudokuColumnStore[activeCol].push(activeValue);\n  sudokuBoxStore[activeBox].push(activeValue);\n  if (checkValueForCompletion(activeValue, sudokuRowStore, sudokuColumnStore, sudokuBoxStore)) {\n    const updatedKey = [...sudokuKey.filter(item => item !== activeValue)];\n    setSudokuKey(updatedKey);\n  }\n};\n\nexport const checkValueForCompletion = (value, sudokuRowStore, sudokuColumnStore, sudokuBoxStore) => {\n  let counter = 0;\n\n  sudokuRowStore.forEach((row) => {\n    row.some((num) => {\n      if (num === value) {\n        counter++;\n        return true;\n      } else return false;\n    });\n  });\n\n  if (counter !== 9) return false;\n\n  sudokuColumnStore.forEach((col) => {\n    col.some((num) => {\n      if (num === value) {\n        counter++;\n        return true;\n      } else return false;\n    });\n  });\n\n  if (counter !== 18) return false;\n\n  sudokuBoxStore.forEach((box) => {\n    box.some((num) => {\n      if (num === value) {\n        counter++;\n        return true;\n      } else return false;\n    });\n  });\n\n  if (counter !== 27) return false;\n\n  return true;\n};\n\nexport const removeOneCopyFromStore = (\n  activeValue,\n  activeRow,\n  activeCol,\n  activeBox,\n  sudokuRowStore,\n  sudokuColumnStore,\n  sudokuBoxStore,\n  sudokuKey,\n  setSudokuKey,\n) => {\n  const updatedRow = removeOneCopy(activeValue, sudokuRowStore[activeRow]);\n  const updatedCol = removeOneCopy(activeValue, sudokuColumnStore[activeCol]);\n  const updatedBox = removeOneCopy(activeValue, sudokuBoxStore[activeBox]);\n  sudokuRowStore[activeRow] = updatedRow;\n  sudokuColumnStore[activeCol] = updatedCol;\n  sudokuBoxStore[activeBox] = updatedBox;\n  if (!checkValueForCompletion(activeValue, sudokuRowStore, sudokuColumnStore, sudokuBoxStore)) {\n    if (!sudokuKey.includes(activeValue)) {\n      const updatedKey = [...sudokuKey, activeValue];\n      setSudokuKey(updatedKey);\n    }\n  }\n};\n\nexport const resetBoardState = (\n  setSudokuKey,\n  setActiveRow,\n  setActiveCol,\n  setActiveBox,\n  setActiveValue,\n) => {\n  setSudokuKey([1,2,3,4,5,6,7,8,9]);\n  setActiveRow(0);\n  setActiveCol(0);\n  setActiveBox(0);\n  setActiveValue('');\n};\n\n// export const isBoardComplete = (board) => {\n//   let loop = false;\n//   let code = 0;\n//   board.some(row => {\n//     row.some(square => {\n//       if (square.error) {\n//         code = 1;\n//         loop = true;\n//         return true;\n//       } else if (typeof square.number === 'string') {\n//         code = 2;\n//         loop = true;\n//         return true;\n//       } else {\n//         return false;\n//       }\n//     });\n//     if (loop) {\n//       return true;\n//     } else {\n//       return false;\n//     }\n//   });\n//   return code;\n// };\n\nexport const initializeSudokuStore = (\n  setSudokuRowStore,\n  setSudokuColumnStore,\n  setSudokuBoxStore,\n  originalBoard,\n) => {\n  const sudokuRowStore = [[], [], [], [], [], [], [], [], []];\n  const sudokuColumnStore = [[], [], [], [], [], [], [], [], []];\n  const sudokuBoxStore = [[], [], [], [], [], [], [], [], []];\n  originalBoard.forEach((row, rowIndex) => {\n    row.forEach((value, columnIndex) => {\n      if (typeof value === 'number') {\n\n        const boxIndex = calculateBox(rowIndex, columnIndex);\n        if(!sudokuBoxStore[boxIndex].includes(value)) {\n          sudokuBoxStore[boxIndex].push(value);\n        }\n\n        if (!sudokuRowStore[rowIndex].includes(value)) {\n          sudokuRowStore[rowIndex].push(value);\n        }\n        if (!sudokuColumnStore[columnIndex].includes(value)) {\n          sudokuColumnStore[columnIndex].push(value);\n        }\n      }\n    });\n  });\n  setSudokuRowStore(sudokuRowStore);\n  setSudokuColumnStore(sudokuColumnStore);\n  setSudokuBoxStore(sudokuBoxStore);\n};\n\nexport const isKeyStrokeValid = (currentKey, newKey) => {\n  const sudokuRegex = /^[1-9]$/;\n  if (!sudokuRegex.test(newKey)) {\n    return false;\n  }\n  if (currentKey === newKey) {\n    return false;\n  }\n  return true;\n};\n\nexport const calculateBox = (row, col) => {\n  if (row < 3) {\n    if (col < 3) {\n      return 0;\n    } else if (col < 6) {\n      return 1;\n    } else {\n      return 2;\n    }\n  } else if (row >= 3 && row < 6) {\n    if (col < 3) {\n      return 3;\n    } else if (col < 6) {\n      return 4;\n    } else {\n      return 5;\n    }\n  } else if (row >=6 && row < 9) {\n    if (col < 3) {\n      return 6;\n    } else if (col < 6) {\n      return 7;\n    } else {\n      return 8;\n    }\n  }\n};\n","import {\n  initializeBoard,\n  initializeSudokuStore,\n  resetBoardState,\n  isKeyStrokeValid,\n  addOneCopyToStore,\n  removeOneCopyFromStore,\n  calculateBox,\n} from './utils';\n\nexport const handleSquareSelection = (\n  board,\n  setActiveRow,\n  setActiveCol,\n  setActiveBox,\n  setActiveValue,\n) => (newRow, newCol) => {\n  setActiveRow(newRow);\n  setActiveCol(newCol);\n  setActiveBox(calculateBox(newRow, newCol));\n  setActiveValue(board[newRow][newCol].number);\n};\n\nexport const handleBoardReset = (\n  originalBoard,\n  setBoard,\n  setRenderBoard,\n  setSudokuKey,\n  setSudokuRowStore,\n  setSudokuColumnStore,\n  setSudokuBoxStore,\n  setActiveRow,\n  setActiveCol,\n  setActiveBox,\n  setActiveValue,\n) => () => {\n  setRenderBoard(false);\n  initializeBoard(setBoard, setRenderBoard, originalBoard);\n  initializeSudokuStore(\n    setSudokuRowStore,\n    setSudokuColumnStore,\n    setSudokuBoxStore,\n    originalBoard,\n  );\n  resetBoardState(\n    setSudokuKey,\n    setActiveRow,\n    setActiveCol,\n    setActiveBox,\n    setActiveValue,\n  );\n};\n\nexport const handleNewBoard = (\n  setBoard,\n  setOriginalBoard,\n  setRenderBoard,\n  setSudokuKey,\n  setSudokuRowStore,\n  setSudokuColumnStore,\n  setSudokuBoxStore,\n  setActiveRow,\n  setActiveCol,\n  setActiveBox,\n  setActiveValue,\n) => (difficulty) => {\n  setRenderBoard(false);\n  const SudokuGenerator = require('js-sudoku-generator').SudokuGenerator;\n  const newBoard = SudokuGenerator.generate(1)[0].getSheet(difficulty);\n  setOriginalBoard(newBoard);\n  initializeBoard(setBoard, setRenderBoard, newBoard);\n  initializeSudokuStore(setSudokuRowStore, setSudokuColumnStore, setSudokuBoxStore, newBoard);\n  resetBoardState(\n    setSudokuKey,\n    setActiveRow,\n    setActiveCol,\n    setActiveBox,\n    setActiveValue,\n  );\n};\n\nexport const handleSudokuKeyDown = (\n  board,\n  sudokuKey,\n  activeRow,\n  activeValue,\n  activeCol,\n  activeBox,\n  sudokuRowStore,\n  sudokuColumnStore,\n  sudokuBoxStore,\n  setActiveValue,\n  setSudokuKey,\n) => (newKey) => {\n  \n  if (board[activeRow][activeCol].fixed) {\n    return;\n  }\n\n  if (newKey === 'Backspace') {\n    if (typeof activeValue === 'number') {\n      Object.assign(board[activeRow][activeCol], { number : '', error: false });\n      removeOneCopyFromStore(\n        activeValue,\n        activeRow,\n        activeCol,\n        activeBox,\n        sudokuRowStore,\n        sudokuColumnStore,\n        sudokuBoxStore,\n        sudokuKey,\n        setSudokuKey,\n      );\n      setActiveValue('');\n    }\n    return;\n  }\n\n  const num = Number(newKey);\n\n  if (!isKeyStrokeValid(activeValue, num)) {\n    return;\n  }\n\n  const newSquare = { number: num, error: false };\n\n  if (sudokuRowStore[activeRow].includes(num)\n      || sudokuColumnStore[activeCol].includes(num)\n      || sudokuBoxStore[activeBox].includes(num)) {\n    newSquare.error = true;\n  }\n\n  if (typeof activeValue === 'number') {\n    removeOneCopyFromStore(\n      activeValue,\n      activeRow,\n      activeCol,\n      activeBox,\n      sudokuRowStore,\n      sudokuColumnStore,\n      sudokuBoxStore,\n      sudokuKey,\n      setSudokuKey,\n    );\n  }\n\n  Object.assign(board[activeRow][activeCol], newSquare);\n  addOneCopyToStore(\n    num,\n    activeRow,\n    activeCol,\n    activeBox,\n    sudokuRowStore,\n    sudokuColumnStore,\n    sudokuBoxStore,\n    sudokuKey,\n    setSudokuKey,\n  );\n  setActiveValue(num);\n};\n","import React, { useState, useEffect, createContext } from 'react';\n\nimport {\n  handleNewBoard,\n  handleBoardReset,\n  handleSquareSelection,\n  handleSudokuKeyDown,\n} from './handlers';\n\nimport { initializeBoard, initializeSudokuStore } from './utils';\n\nconst SudokuGenerator = require('js-sudoku-generator').SudokuGenerator;\nconst generatedBoard = SudokuGenerator.generate(1)[0].getSheet(0);\n\n// const generatedBoard = [\n//   [\"\", 5, \"\", 3, 2, \"\", \"\", \"\", 8],\n//   [\"\", 6, \"\", 9, \"\", \"\", \"\", 7, 2],\n//   [3, 2, \"\", \"\", 1, \"\", \"\", 5, \"\"],\n//   [\"\", 8, \"\", 1, 9, \"\", 2, \"\", \"\"],\n//   [\"\", \"\", 1, \"\", 3, \"\", \"\", 9, 5],\n//   [2, \"\", \"\", \"\", \"\", 8, \"\", 1, 3],\n//   [\"\", 1, 2, \"\", 8, \"\", \"\", \"\", 4],\n//   [\"\", \"\", 9, \"\", \"\", 1, 7, \"\", 6],\n//   [5, \"\", \"\", 2, \"\", 3, \"\", 8, \"\"],\n// ];\n\nconst emptyBoard = [\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n];\n\nconst SudokuContext = createContext();\nconst SudokuProvider = ({ children }) => {\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(generatedBoard);\n  const [activeValue, setActiveValue] = useState('');\n  const [activeRow, setActiveRow] = useState(0);  \n  const [activeCol, setActiveCol] = useState(0);\n  const [activeBox, setActiveBox] = useState(0);\n  const [sudokuRowStore, setSudokuRowStore] = useState(emptyBoard);\n  const [sudokuColumnStore, setSudokuColumnStore] = useState(emptyBoard);\n  const [sudokuBoxStore, setSudokuBoxStore] = useState(emptyBoard);\n  const [sudokuKey, setSudokuKey] = useState([1,2,3,4,5,6,7,8,9]);\n  const [renderBoard, setRenderBoard] = useState(false);\n  useEffect(() => {\n    initializeBoard(setBoard, setRenderBoard, originalBoard);\n    initializeSudokuStore(setSudokuRowStore, setSudokuColumnStore, setSudokuBoxStore, originalBoard);\n  }, [originalBoard]);\n  const context = {\n    board,\n    activeValue,\n    activeRow,\n    activeCol,\n    activeBox,\n    sudokuRowStore,\n    sudokuColumnStore,\n    sudokuBoxStore,\n    sudokuKey,\n    onNewBoard: handleNewBoard(\n      setBoard,\n      setOriginalBoard,\n      setRenderBoard,\n      setSudokuKey,\n      setSudokuRowStore,\n      setSudokuColumnStore,\n      setSudokuBoxStore,\n      setActiveRow,\n      setActiveCol,\n      setActiveBox,\n      setActiveValue,\n    ),\n    onBoardReset: handleBoardReset(\n      originalBoard,\n      setBoard,\n      setRenderBoard,\n      setSudokuKey,\n      setSudokuRowStore,\n      setSudokuColumnStore,\n      setSudokuBoxStore,\n      setActiveRow,\n      setActiveCol,\n      setActiveBox,\n      setActiveValue,\n    ),\n    onSquareSelection: handleSquareSelection(\n      board,\n      setActiveRow,\n      setActiveCol,\n      setActiveBox,\n      setActiveValue\n    ),\n    onSudokuKeyDown: handleSudokuKeyDown(\n      board,\n      sudokuKey,\n      activeRow,\n      activeValue,\n      activeCol,\n      activeBox,\n      sudokuRowStore,\n      sudokuColumnStore,\n      sudokuBoxStore,\n      setActiveValue,\n      setSudokuKey,\n    ),\n  };\n  return (\n    <SudokuContext.Provider value={context}>\n      { renderBoard && (children) }\n    </SudokuContext.Provider>\n  );\n};\n\nexport { SudokuContext, SudokuProvider };\n","import React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from 'grommet';\n\nimport { SudokuContext } from '../../context';\n\nimport { getSquareStyle } from './utils';\n\nconst SudokuSquare = ({ row, col, border }) => {\n  const {\n    board,\n    activeRow,\n    activeCol,\n    activeValue,\n    onSudokuKeyDown,\n    onSquareSelection,\n  } = useContext(SudokuContext);\n\n  const [active, setActive] = useState(false);\n  const [squareStyle, setSquareStyle] = useState({ fontWeight: 'light' });\n  \n  useEffect(() => {\n    getSquareStyle(board, row, col, activeValue, setSquareStyle);\n    if (activeRow === row && activeCol === col) {\n      setActive(true);\n    } else {\n      setActive(false);\n    }\n  }, [board, row, col, activeValue, activeRow, activeCol]);\n\n  return (\n    <Box\n      fill={true}\n      justify='center'\n      align='center'\n      focusIndicator={false}\n      style={squareStyle}\n      background={ active ? 'lavender' : 'none' }\n      onClick={() => onSquareSelection(row, col)}\n      hoverIndicator={{ color: 'lavender' }}\n      border={ border ?  { side: 'right' } : false }\n    >\n      <input\n        type='text'\n        onKeyDown={ev => onSudokuKeyDown(ev.key)}\n        onChange={() => {}}\n        value={board[row][col]?.number}\n        style={{\n          border: 'none',\n          outline: 'none',\n          boxSizing: 'border-box',\n          background: 'transparent',\n          caretColor: 'transparent',\n          cursor: 'pointer',\n          fontSize: 'inherit',\n          fontWeight: 'inherit',\n          fontFamily: 'inherit',\n          color: 'inherit',\n          width: '100%',\n          height: '100%',\n          textAlign: 'center',\n        }}\n      />\n    </Box>\n  );\n};\n\nSudokuSquare.propTypes = {\n  row: PropTypes.number.isRequired,\n  col: PropTypes.number.isRequired,\n  border: PropTypes.bool.isRequired,\n};\n\nexport default SudokuSquare;\n","export const getSquareStyle = (board, row, col, activeValue, setSquareStyle) => {\n  const resObj = {\n    fontWeight: '300',\n    fontSize: '22px',\n  };\n  if (board[row][col].fixed) {\n    resObj.background = '#F2F2F2';\n  }\n  if (typeof activeValue === 'number' && board[row][col].number === activeValue) {\n    resObj.fontWeight = '700';\n  }\n  if (board[row][col].error) {\n    resObj.color = '#FF4040';\n  }\n  setSquareStyle(resObj);\n};\n","export const calculateStarting = (boxRow) => {\n  if (boxRow === 1) {\n    return 0;\n  } else if (boxRow === 2) {\n    return 3;\n  } else {\n    return 6;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from 'grommet';\nimport SudokuSquare from '../SudokuSquare';\n\nimport { calculateStarting } from './utils';\n\nconst SudokuBox = ({ boxRow, boxCol }) => {\n  const startingRow = calculateStarting(boxRow);\n  return (\n    <Box\n      justify='between'\n      fill={true}\n    >\n      <SudokuRow col={boxCol} row={startingRow} border={true} />\n      <SudokuRow col={boxCol} row={startingRow + 1} border={true} />\n      <SudokuRow col={boxCol} row={startingRow + 2} border={false} />\n    </Box>\n  );\n};\n\nconst SudokuRow = ({ col, row, border }) => {\n  const startingCol = calculateStarting(col);\n  return (\n    <Box\n      fill={true}\n      justify='between'\n      direction='row'\n      border={ border ? { side: 'bottom' } : false}\n    >\n      <SudokuSquare col={startingCol} row={row} border={true} value='9' />\n      <SudokuSquare col={startingCol + 1} row={row} border={true} value='8' />\n      <SudokuSquare col={startingCol + 2} row={row} border={false} value='7' />\n    </Box>\n  );\n};\n\nconst SudokuBoardRow = ({ boxRow, border }) => {\n  return (\n    <Box\n      direction='row'\n      justify='between'\n      fill={true}\n      border={ border ? { side: 'bottom', color: 'black', size: '3px'} : false }\n    >\n      <Box\n        fill={true}\n        border={{ side: 'right', color: 'black', size: '3px' }}\n      >\n        <SudokuBox boxRow={boxRow} boxCol={1} />\n      </Box>\n      <Box\n        fill={true}\n        border={{ side: 'right', color: 'black', size: '3px' }}\n      >\n        <SudokuBox boxRow={boxRow} boxCol={2} />\n      </Box>\n      <Box\n        fill={true}\n      >\n        <SudokuBox boxRow={boxRow} boxCol={3} />\n      </Box>\n    </Box>\n  );\n};\n\nSudokuBoardRow.propTypes = {\n  boxRow: PropTypes.number.isRequired,\n  boxCol: PropTypes.number.isRequired,\n};\n\nexport default SudokuBoardRow;\n","import React from 'react';\nimport { Box } from 'grommet';\nimport SudokuBoardRow from './SudokuBoardRow';\n\nconst SudokuBoard = () => {\n  return (\n    <Box\n      width='380px'\n      height='380px'\n      justify='between'\n      border={{ color: 'black', size: '4px' }}\n    >\n      <SudokuBoardRow boxRow={1} border={true} />\n      <SudokuBoardRow boxRow={2} border={true} />\n      <SudokuBoardRow boxRow={3} border={false} />\n    </Box>\n  );\n};\n\nexport default SudokuBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from 'grommet';\n\nconst FooterButton = ({ label, onClick }) => {\n  return (\n    <Box\n      pad={{ vertical: 'xsmall', horizontal: 'small' }}\n      onClick={onClick}\n      hoverIndicator={{ color: 'light-3' }}\n      background='lavender'\n      align='center'\n      justify='center'\n      elevation='medium'\n    >\n      {label}\n    </Box>\n  );\n};\n\nFooterButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default FooterButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Button, Layer, Text } from 'grommet';\n\nconst FinishModal = ({ setFinishModal, setNewGameModal }) => {\n  return (\n    <Layer>\n      <Box\n        gap='small'\n        pad={{ horizontal: 'large', vertical: 'medium' }}\n        align='center'\n      >\n        <Text>Well done 🤝</Text>\n        <Text weight={600}>Play again?</Text>\n        <Box\n          direction='row'\n          justify='center'\n          gap='small'\n          pad='small'\n        >\n          <Button\n            primary\n            label='Go!'\n            color='lavender'\n            size='small'\n            onClick={() => {\n              setFinishModal(false);\n              setNewGameModal(true);\n            }}\n          />\n        </Box>\n      </Box>\n    </Layer>\n  );\n};\n\nFinishModal.propTypes = {\n  setFinishModal: PropTypes.func.isRequired,\n};\n\nexport default FinishModal;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text } from 'grommet';\n\nconst ModalButton = ({\n  label,\n  difficulty,\n  currentDifficulty,\n  setDifficulty,\n}) => {\n  const [active, setActive] = useState(false);\n  \n  useEffect(() => {\n    currentDifficulty === difficulty ? setActive(true) : setActive(false);\n  }, [difficulty, currentDifficulty]);\n\n  return (\n    <Box\n      fill='horizontal'\n      background={ active ? 'lavender' : 'none' }\n      onClick={() => setDifficulty(difficulty)}\n      hoverIndicator={{ color: 'light-5' }}\n      align='center'\n      justify='center'\n      pad='small'\n    >\n      <Text size='small'>{label}</Text>\n    </Box>\n  );\n};\n\nModalButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  currentDifficulty: PropTypes.number.isRequired,\n  setDifficulty: PropTypes.func.isRequired,\n};\n\nexport default ModalButton;\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text, Button, Layer } from 'grommet';\n\nimport ModalButton from './ModalButton';\nimport { SudokuContext } from '../../context';\n\nconst NewGameModal = ({ setNewGameModal }) => {\n  const { onNewBoard } = useContext(SudokuContext);\n  const [difficulty, setDifficulty] = useState(0);\n  return (\n    <Layer>\n      <Box align='center'>\n        <Box\n          alignSelf='end'\n          onClick={() => setNewGameModal(false)}\n          round={true}\n          hoverIndicator={{ color: 'lavedner' }}\n          pad={{ horizontal: 'xsmall' }}\n          focusIndicator={false}\n        >\n          <Text size='small'>x</Text>\n        </Box>\n        <Box pad={{ horizontal: 'large', vertical: 'small' }}>\n          {\n            ['Easy', 'Medium', 'Hard'].map((label, index) => (\n              <ModalButton\n                label={label}\n                difficulty={index}\n                currentDifficulty={difficulty}\n                setDifficulty={setDifficulty}\n              />\n            ))\n          }\n          <Box\n            direction='row'\n            justify='center'\n            gap='small'\n            pad={{ top: 'medium' }}\n          >\n            <Button\n              label='Go!'\n              size='small'\n              style={{ borderRadius: '0px' }}\n              color='lavender'\n              onClick={() => {\n                setNewGameModal(false);\n                onNewBoard(difficulty);\n              }}\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Layer>\n  );\n};\n\nNewGameModal.propTypes = {\n  setNewGameModal: PropTypes.func.isRequired,\n};\n\nexport default NewGameModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Box, Text } from 'grommet';\n\nimport FooterButton from './FooterButton';\nimport FinishModal from './FinishModal';\nimport NewGameModal from '../NewGameModal';\nimport { SudokuContext } from '../../context';\n\nconst SudokuFooter = () => {\n\n  const { message, sudokuKey, onBoardReset } = useContext(SudokuContext);\n\n  const [finishModal, setFinishModal] = useState(false);\n  const [newGameModal, setNewGameModal] = useState(true);\n\n  useEffect(() => {\n    sudokuKey.length === 0 ? setFinishModal(true) : setFinishModal(false);\n  }, [sudokuKey]);\n\n  return (\n    <Box\n      pad='medium'\n      align='center'\n      gap='medium'\n    >\n      <Box\n        direction='row'\n        gap='large'\n      >\n        <FooterButton onClick={onBoardReset} label='Reset' />\n        <FooterButton onClick={() => setNewGameModal(true)} label='New Game' />\n      </Box>\n      <Text size='small' color='status-error'>\n        {message}\n      </Text>\n      { finishModal && (\n        <FinishModal\n          setFinishModal={setFinishModal}\n          setNewGameModal={setNewGameModal}\n        />\n       )}\n      { newGameModal && <NewGameModal setNewGameModal={setNewGameModal} /> }\n    </Box>\n  );\n};\n\nexport default SudokuFooter;\n","import React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text } from 'grommet';\n\nimport { SudokuContext } from '../../context';\n\nconst SudokuKeyItem = ({ number }) => {\n  const { sudokuKey } = useContext(SudokuContext);\n\n  const [showNumber, setShowNumber] = useState(true);\n  \n  useEffect(() => {\n    sudokuKey.includes(number) ? setShowNumber(true) : setShowNumber(false);\n  }, [sudokuKey, number]);\n\n  return (\n    <Box\n      width='27px'\n      height='27px'\n    >\n      {\n        showNumber && (\n          <Box\n            border={{ color: 'black' }}\n            fill={true}\n            round={true}\n            background='lavender'\n            align='center'\n            justify='center'\n          >\n            <Text size='small' color='black'>{number}</Text>\n          </Box>\n        )\n      }\n    </Box>\n  );\n};\n\nSudokuKeyItem.propTypes = {\n  number: PropTypes.number.isRequired,\n};\n\nexport default SudokuKeyItem;\n","import React from 'react';\nimport { Box } from 'grommet';\n\nimport SudokuKeyItem from './SudokuKeyItem';\n\nconst SudokuKey = () => {\n  return (\n    <Box\n      direction='row'\n      width='345px'\n      justify='between'\n      pad={{ bottom: 'small' }}\n    >\n      <SudokuKeyItem number={1} />\n      <SudokuKeyItem number={2} />\n      <SudokuKeyItem number={3} />\n      <SudokuKeyItem number={4} />\n      <SudokuKeyItem number={5} />\n      <SudokuKeyItem number={6} />\n      <SudokuKeyItem number={7} />\n      <SudokuKeyItem number={8} />\n      <SudokuKeyItem number={9} />\n    </Box>\n  );\n};\n\nexport default SudokuKey;\n","import { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\n\nexport const sudokuTheme = deepMerge(grommet, {\n  global: {\n    colors: {\n      myColor: '#dcc2ee'\n    },\n    font: {\n      color: 'black',\n      family: 'Nunito',\n    },\n  },\n  button: {\n    size: {\n      small: {\n        border: {\n          radius: '0px',\n        },\n      },\n    },\n    border: {\n      radius: '0px'\n    }\n  }\n});","import React from 'react';\nimport {\n  Grommet,\n  Box,\n  Heading,\n} from 'grommet';\n\nimport {\n  SudokuBoard,\n  SudokuKey,\n  SudokuFooter,\n} from './components';\nimport { SudokuProvider } from './context';\nimport { sudokuTheme } from './theme';\n\nconst App = () => {\n  return (\n    <Grommet full theme={sudokuTheme}>\n      <Box align='center' pad='medium'>\n        <Heading style={{ fontWeight: '400' }} size='small'>\n          Sudoku\n        </Heading>\n        <SudokuProvider>\n          <SudokuKey />\n          <SudokuBoard />\n          <SudokuFooter />\n        </SudokuProvider>\n      </Box>\n    </Grommet>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}